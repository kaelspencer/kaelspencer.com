from django.db import models
import random, string
from pygments import highlight
from pygments.formatters import HtmlFormatter
from pygments.lexers import get_lexer_by_name

LEXERS = (
    (u'text', u'Plain text'),
    (u'c', u'C'),
    (u'cpp', u'C++'),
    (u'csharp', u'C#'),
    (u'css', u'CSS'),
    (u'html', u'HTML'),
    (u'html+django', u'HTML+Django/Jinja'),
    (u'java', u'Java'),
    (u'js', u'JavaScript'),
    (u'js+django', u'JavaScript+Django/Jinja'),
    (u'json', u'JSON'),
    (u'php', u'PHP'),
    (u'perl', u'Perl'),
    (u'python', u'Python'),
    (u'python3', u'Python 3'),
    (u'rb', u'Ruby'),
    (u'sql', u'SQL'),
    (u'abap', u'ABAP'),
    (u'ada', u'Ada'),
    (u'ahk', u'autohotkey'),
    (u'antlr', u'ANTLR'),
    (u'antlr-as', u'ANTLR With ActionScript Target'),
    (u'antlr-cpp', u'ANTLR With CPP Target'),
    (u'antlr-csharp', u'ANTLR With C# Target'),
    (u'antlr-java', u'ANTLR With Java Target'),
    (u'antlr-objc', u'ANTLR With ObjectiveC Target'),
    (u'antlr-perl', u'ANTLR With Perl Target'),
    (u'antlr-python', u'ANTLR With Python Target'),
    (u'antlr-ruby', u'ANTLR With Ruby Target'),
    (u'apacheconf', u'ApacheConf'),
    (u'applescript', u'AppleScript'),
    (u'as', u'ActionScript'),
    (u'as3', u'ActionScript 3'),
    (u'aspectj', u'AspectJ'),
    (u'aspx-cs', u'aspx-cs'),
    (u'aspx-vb', u'aspx-vb'),
    (u'asy', u'Asymptote'),
    (u'autoit', u'AutoIt'),
    (u'awk', u'Awk'),
    (u'basemake', u'Base Makefile'),
    (u'bash', u'Bash'),
    (u'bat', u'Batchfile'),
    (u'bbcode', u'BBCode'),
    (u'befunge', u'Befunge'),
    (u'blitzmax', u'BlitzMax'),
    (u'boo', u'Boo'),
    (u'brainfuck', u'Brainfuck'),
    (u'bro', u'Bro'),
    (u'bugs', u'BUGS'),
    (u'c-objdump', u'c-objdump'),
    (u'ca65', u'ca65'),
    (u'cbmbas', u'CBM BASIC V2'),
    (u'ceylon', u'Ceylon'),
    (u'cfengine3', u'CFEngine3'),
    (u'cfm', u'Coldfusion HTML'),
    (u'cfs', u'cfstatement'),
    (u'cheetah', u'Cheetah'),
    (u'Clipper', u'FoxPro'),
    (u'clojure', u'Clojure'),
    (u'cmake', u'CMake'),
    (u'cobol', u'COBOL'),
    (u'cobolfree', u'COBOLFree'),
    (u'coffee-script', u'CoffeeScript'),
    (u'common-lisp', u'Common Lisp'),
    (u'console', u'Bash Session'),
    (u'control', u'Debian Control file'),
    (u'coq', u'Coq'),
    (u'cpp-objdump', u'cpp-objdump'),
    (u'croc', u'Croc'),
    (u'css', u'CSS'),
    (u'css+django', u'CSS+Django/Jinja'),
    (u'css+erb', u'CSS+Ruby'),
    (u'css+genshitext', u'CSS+Genshi Text'),
    (u'css+lasso', u'CSS+Lasso'),
    (u'css+mako', u'CSS+Mako'),
    (u'css+myghty', u'CSS+Myghty'),
    (u'css+php', u'CSS+PHP'),
    (u'css+smarty', u'CSS+Smarty'),
    (u'Cucumber', u'Gherkin'),
    (u'cuda', u'CUDA'),
    (u'cython', u'Cython'),
    (u'd', u'D'),
    (u'd-objdump', u'd-objdump'),
    (u'dart', u'Dart'),
    (u'delphi', u'Delphi'),
    (u'dg', u'dg'),
    (u'diff', u'Diff'),
    (u'django', u'Django/Jinja'),
    (u'dpatch', u'Darcs Patch'),
    (u'dtd', u'DTD'),
    (u'duel', u'Duel'),
    (u'dylan', u'Dylan'),
    (u'dylan-console', u'Dylan session'),
    (u'dylan-lid', u'DylanLID'),
    (u'ec', u'eC'),
    (u'ecl', u'ECL'),
    (u'elixir', u'Elixir'),
    (u'erb', u'ERB'),
    (u'erl', u'Erlang erl session'),
    (u'erlang', u'Erlang'),
    (u'evoque', u'Evoque'),
    (u'factor', u'Factor'),
    (u'fan', u'Fantom'),
    (u'fancy', u'Fancy'),
    (u'felix', u'Felix'),
    (u'fortran', u'Fortran'),
    (u'fsharp', u'FSharp'),
    (u'gas', u'GAS'),
    (u'genshi', u'Genshi'),
    (u'genshitext', u'Genshi Text'),
    (u'glsl', u'GLSL'),
    (u'gnuplot', u'Gnuplot'),
    (u'go', u'Go'),
    (u'gooddata-cl', u'GoodData-CL'),
    (u'gosu', u'Gosu'),
    (u'groff', u'Groff'),
    (u'groovy', u'Groovy'),
    (u'gst', u'Gosu Template'),
    (u'haml', u'Haml'),
    (u'haskell', u'Haskell'),
    (u'haxeml', u'Hxml'),
    (u'html+cheetah', u'HTML+Cheetah'),
    (u'html+evoque', u'HTML+Evoque'),
    (u'html+genshi', u'HTML+Genshi'),
    (u'html+lasso', u'HTML+Lasso'),
    (u'html+mako', u'HTML+Mako'),
    (u'html+myghty', u'HTML+Myghty'),
    (u'html+php', u'HTML+PHP'),
    (u'html+smarty', u'HTML+Smarty'),
    (u'html+velocity', u'HTML+Velocity'),
    (u'http', u'HTTP'),
    (u'hx', u'haXe'),
    (u'hybris', u'Hybris'),
    (u'idl', u'IDL'),
    (u'iex', u'Elixir iex session'),
    (u'ini', u'INI'),
    (u'io', u'Io'),
    (u'ioke', u'Ioke'),
    (u'irc', u'IRC logs'),
    (u'jade', u'Jade'),
    (u'jags', u'JAGS'),
    (u'jlcon', u'Julia console'),
    (u'js+cheetah', u'JavaScript+Cheetah'),
    (u'js+erb', u'JavaScript+Ruby'),
    (u'js+genshitext', u'JavaScript+Genshi Text'),
    (u'js+lasso', u'JavaScript+Lasso'),
    (u'js+mako', u'JavaScript+Mako'),
    (u'js+myghty', u'JavaScript+Myghty'),
    (u'js+php', u'JavaScript+PHP'),
    (u'js+smarty', u'JavaScript+Smarty'),
    (u'jsp', u'Java Server Page'),
    (u'julia', u'Julia'),
    (u'kconfig', u'Kconfig'),
    (u'koka', u'Koka'),
    (u'kotlin', u'Kotlin'),
    (u'lasso', u'Lasso'),
    (u'lhs', u'Literate Haskell'),
    (u'lighty', u'Lighttpd configuration file'),
    (u'live-script', u'LiveScript'),
    (u'llvm', u'LLVM'),
    (u'logos', u'Logos'),
    (u'logtalk', u'Logtalk'),
    (u'lua', u'Lua'),
    (u'make', u'Makefile'),
    (u'mako', u'Mako'),
    (u'maql', u'MAQL'),
    (u'mason', u'Mason'),
    (u'matlab', u'Matlab'),
    (u'matlabsession', u'Matlab session'),
    (u'minid', u'MiniD'),
    (u'modelica', u'Modelica'),
    (u'modula2', u'Modula-2'),
    (u'monkey', u'Monkey'),
    (u'moocode', u'MOOCode'),
    (u'moon', u'MoonScript'),
    (u'mscgen', u'Mscgen'),
    (u'mupad', u'MuPAD'),
    (u'mxml', u'MXML'),
    (u'myghty', u'Myghty'),
    (u'mysql', u'MySQL'),
    (u'nasm', u'NASM'),
    (u'nemerle', u'Nemerle'),
    (u'newlisp', u'NewLisp'),
    (u'newspeak', u'Newspeak'),
    (u'nginx', u'Nginx configuration file'),
    (u'nimrod', u'Nimrod'),
    (u'nsis', u'NSIS'),
    (u'numpy', u'NumPy'),
    (u'objdump', u'objdump'),
    (u'objective-c', u'Objective-C'),
    (u'objective-c++', u'Objective-C++'),
    (u'objective-j', u'Objective-J'),
    (u'ocaml', u'OCaml'),
    (u'octave', u'Octave'),
    (u'ooc', u'Ooc'),
    (u'opa', u'Opa'),
    (u'openedge', u'OpenEdge ABL'),
    (u'plpgsql', u'PL/pgSQL'),
    (u'postgresql', u'PostgreSQL SQL dialect'),
    (u'postscript', u'PostScript'),
    (u'pot', u'Gettext Catalog'),
    (u'pov', u'POVRay'),
    (u'powershell', u'PowerShell'),
    (u'prolog', u'Prolog'),
    (u'properties', u'Properties'),
    (u'protobuf', u'Protocol Buffer'),
    (u'psql', u'PostgreSQL console (psql)'),
    (u'puppet', u'Puppet'),
    (u'py3tb', u'Python 3.0 Traceback'),
    (u'pycon', u'Python console session'),
    (u'pypylog', u'PyPy Log'),
    (u'pytb', u'Python Traceback'),
    (u'qml', u'QML'),
    (u'racket', u'Racket'),
    (u'ragel', u'Ragel'),
    (u'ragel-c', u'Ragel in C Host'),
    (u'ragel-cpp', u'Ragel in CPP Host'),
    (u'ragel-d', u'Ragel in D Host'),
    (u'ragel-em', u'Embedded Ragel'),
    (u'ragel-java', u'Ragel in Java Host'),
    (u'ragel-objc', u'Ragel in Objective C Host'),
    (u'ragel-ruby', u'Ragel in Ruby Host'),
    (u'raw', u'Raw token data'),
    (u'rbcon', u'Ruby irb session'),
    (u'rconsole', u'RConsole'),
    (u'rd', u'Rd'),
    (u'rebol', u'REBOL'),
    (u'redcode', u'Redcode'),
    (u'registry', u'reg'),
    (u'rhtml', u'RHTML'),
    (u'RobotFramework', u'RobotFramework'),
    (u'rst', u'reStructuredText'),
    (u'rust', u'Rust'),
    (u'sass', u'Sass'),
    (u'scala', u'Scala'),
    (u'scaml', u'Scaml'),
    (u'scheme', u'Scheme'),
    (u'scilab', u'Scilab'),
    (u'scss', u'SCSS'),
    (u'shell-session', u'Shell Session'),
    (u'smali', u'Smali'),
    (u'smalltalk', u'Smalltalk'),
    (u'smarty', u'Smarty'),
    (u'sml', u'Standard ML'),
    (u'snobol', u'Snobol'),
    (u'sourceslist', u'Debian Sourcelist'),
    (u'sp', u'SourcePawn'),
    (u'spec', u'RPMSpec'),
    (u'splus', u'S'),
    (u'sqlite3', u'sqlite3con'),
    (u'squidconf', u'SquidConf'),
    (u'ssp', u'Scalate Server Page'),
    (u'stan', u'Stan'),
    (u'systemverilog', u'systemverilog'),
    (u'tcl', u'Tcl'),
    (u'tcsh', u'Tcsh'),
    (u'tea', u'Tea'),
    (u'tex', u'TeX'),
    (u'text', u'Text only'),
    (u'trac-wiki', u'MoinMoin/Trac Wiki markup'),
    (u'treetop', u'Treetop'),
    (u'ts', u'TypeScript'),
    (u'urbiscript', u'UrbiScript'),
    (u'vala', u'Vala'),
    (u'vb.net', u'VB.net'),
    (u'velocity', u'Velocity'),
    (u'verilog', u'verilog'),
    (u'vgl', u'VGL'),
    (u'vhdl', u'vhdl'),
    (u'vim', u'VimL'),
    (u'xml', u'XML'),
    (u'xml+cheetah', u'XML+Cheetah'),
    (u'xml+django', u'XML+Django/Jinja'),
    (u'xml+erb', u'XML+Ruby'),
    (u'xml+evoque', u'XML+Evoque'),
    (u'xml+lasso', u'XML+Lasso'),
    (u'xml+mako', u'XML+Mako'),
    (u'xml+myghty', u'XML+Myghty'),
    (u'xml+php', u'XML+PHP'),
    (u'xml+smarty', u'XML+Smarty'),
    (u'xml+velocity', u'XML+Velocity'),
    (u'xquery', u'XQuery'),
    (u'xslt', u'XSLT'),
    (u'xtend', u'Xtend'),
    (u'yaml', u'YAML'),
)

EXPOSURE_CHOICES = (
    (True, u'Public'),
    (False, u'Private')
)

class Paste(models.Model):
    title = models.CharField(max_length=50, null=True)
    url = models.CharField(max_length=10)
    pastedate = models.DateTimeField(auto_now_add=True)
    rawbody = models.TextField()
    lexedbody = models.TextField()
    lexedcss = models.TextField()
    lexer = models.CharField(choices=LEXERS, max_length=30, default='text')
    expiration_date = models.DateTimeField(null=True, blank=True)
    active = models.BooleanField(default=True)
    exposed = models.BooleanField(default=True)

    def __unicode__(self):
        return self.title

    def get_absolute_url(self):
        return '/p/' + self.url + '/'

    def highlight(self):
        # TODO: The different lexers should store their CSS in another table.
        lexer = get_lexer_by_name(self.lexer)
        formatter = HtmlFormatter(nobackground=True)
        self.lexedbody = highlight(self.rawbody, lexer, formatter)
        self.lexedcss = formatter.get_style_defs('.highlight')

    def save(self, *args, **kwargs):
        if self.url == '':
            self.url = ''.join(random.choice(string.ascii_letters + string.digits) for x in range(10))

        self.highlight()
        super(Paste, self).save(*args, **kwargs)

